/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package automation.api.testes;

import automation.api.dominio.Usuario;
import org.apache.http.HttpStatus;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

public class TesteUsuario extends TesteBase {
    private static final String LISTA_USUARIOS_ENDPOINT = "/users";
    private static final String CRIA_USUARIO_ENDPOINT = "/user";
    private static final String MOSTRAR_USUARIO_ENDPOINT ="/users/{userId}";

    @Test
    public void testeDeveMostraPaginaEspecifica() {
        given().
                param("page", "2").
        when().
                get(LISTA_USUARIOS_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_OK).
                body("page", is(2)).
                body("data", is(notNullValue()));
    }

    @Test
    public void testeDeveCriarUsuarioComSucesso(){
//        Usuario usuario = new Usuario("fabiano", "Qa", "fabiano@gmail.com", "dias");
        Map <String, String> usuario = new HashMap<>();
        usuario.put("name", "fabiano");
        usuario.put("job", "Qa");

        given().
                body(usuario).
        when().
                post(CRIA_USUARIO_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_CREATED).
                body("name", is("fabiano")).
                body("job", is("Qa"));
    }

    @Test
    public void testeDeveVerificarTamanhoDosItemsMostradosIgualAoPerPage() {
        int paginaEsperada = 2;
        int perPageEsperado = retornaPerPageEsperado(paginaEsperada);

        given().
                param("page", paginaEsperada).
        when().
                get(LISTA_USUARIOS_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_OK).
                body( "page", is(paginaEsperada),
    "data.size()", is(perPageEsperado),
                           "data.findAll { it.avatar.startsWith('https://reqres.in') }.size()", is(perPageEsperado));
    }

    @Test
    public void testeDeveMostraUsuarioEspecifico(){
        Usuario usuario = given().
                pathParam("userId", 2).
        when().
                get(MOSTRAR_USUARIO_ENDPOINT).
        then().
                statusCode(HttpStatus.SC_OK).
        extract().
                body().jsonPath().getObject("data", Usuario.class);

        assertThat(usuario.getEmail(), containsString("@reqres.in"));
        assertThat(usuario.getName(), is("Janet"));
        assertThat(usuario.getLastname(), is("Weaver"));
    }

    private int retornaPerPageEsperado(int page) {
        int perPageEsperado = given().
                param("page", page).
            when().
                get(LISTA_USUARIOS_ENDPOINT).
            then().
                statusCode(HttpStatus.SC_OK).
            extract().
                path("per_page");
        return perPageEsperado;
    }

}
